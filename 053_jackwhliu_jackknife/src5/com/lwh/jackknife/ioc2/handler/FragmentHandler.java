package com.lwh.jackknife.ioc2.handler;

import com.lwh.jackknife.ioc2.Context;
import com.lwh.jackknife.ioc2.adapter.InjectAdapter;
import com.lwh.jackknife.ioc2.annotation.ContentView;
import com.lwh.jackknife.ioc2.annotation.ViewInject;
import com.lwh.jackknife.ioc2.util.InjectInfo;
import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.ParameterSpec;
import com.squareup.javapoet.ParameterizedTypeName;
import com.squareup.javapoet.TypeSpec;
import com.squareup.javapoet.TypeVariableName;

import java.io.IOException;
import java.util.List;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.lang.model.element.Element;
import javax.lang.model.element.Modifier;
import javax.lang.model.element.TypeElement;
import javax.lang.model.type.TypeMirror;
import javax.lang.model.util.Types;

public class FragmentHandler extends Context {

    public FragmentHandler(ProcessingEnvironment env, Filer filer) {
        super(env, filer);
    }

    @Override
    public void write(Element element) {
        Element typeElement = element.getEnclosingElement();
        int layoutId;
        ContentView contentView = typeElement.getAnnotation(ContentView.class);
        if (contentView != null) {
            layoutId = contentView.value();
            List<? extends Element> varElements = typeElement.getEnclosedElements();
            InjectInfo info = InjectInfo.createInjectInfo(mEnv, element);
            TypeSpec t = TypeSpec.classBuilder(info.newClassName)
                    .addTypeVariable(TypeVariableName.get("T"))
                    .addSuperinterface(ParameterizedTypeName.get(ClassName.get(InjectAdapter.class), mT))
                    .addModifiers(Modifier.PUBLIC)
                    .addMethod(bindView(info, varElements))
                    .addMethod(createView(info, layoutId))
                    .build();
            try {
                JavaFile javaFile = JavaFile.builder(info.packageName, t)
                        .addFileComment("These codes are generated by JKNF automatically. Do not modify!")
                        .build();
                javaFile.writeTo(mFiler);
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }

    public MethodSpec createView(InjectInfo info, int layoutId) {
        return MethodSpec.methodBuilder("inject")
                .addModifiers(Modifier.PUBLIC)
                .returns(ClassName.bestGuess(CLASS_VIEW))
                .addParameter(ParameterSpec.builder(mT, "target").build())
                .addStatement("  " + info.className + " fragment = (" + info.className + ") target")
                .addStatement("  $T activity = fragment.getActivity()", ClassName.bestGuess(CLASS_ACTIVITY))
                .addStatement("  $T inflater = activity.getLayoutInflater()", ClassName.bestGuess(CLASS_LAYOUT_INFLATER))
                .addStatement("  $T view = inflater.inflate(" + layoutId + ", null)", ClassName.bestGuess(CLASS_VIEW))
                .addStatement("  bindView(target)")
                .addStatement("  return view").build();
    }

    protected MethodSpec bindView(InjectInfo info, List<? extends Element> elements) {
        Types typeUtils = mEnv.getTypeUtils();
        ParameterSpec parameterSpec =
                ParameterSpec.builder(mT, "target").build();
        MethodSpec.Builder bindView = MethodSpec.methodBuilder("bindView");
        bindView
                .addModifiers(Modifier.PRIVATE)
                .addParameter(parameterSpec)
                .addStatement("  "+info.className+" fragment = ("+info.className+") target")
                .addStatement("  $T activity = fragment.getActivity()", ClassName.bestGuess(CLASS_ACTIVITY))
                .returns(void.class);
        for (int i=0;i<elements.size();i++) {
            Element e = elements.get(i);   //获取成员属性
            ViewInject viewInject = e.getAnnotation(ViewInject.class);
            if (viewInject != null) {
                int id = viewInject.value();
                TypeMirror typeMirror = e.asType();
                TypeElement te = (TypeElement) typeUtils.asElement(typeMirror);
                bindView.addCode("  fragment." + e + " = ($T) activity.findViewById(" + id + ");\n", te);
            }
        }
        return bindView.build();
    }
}
