
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/interfaces/interface_factory.mojom
//

package org.chromium.media.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


class InterfaceFactory_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<InterfaceFactory, InterfaceFactory.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<InterfaceFactory, InterfaceFactory.Proxy>() {
    
        public String getName() {
            return "media::mojom::InterfaceFactory";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, InterfaceFactory impl) {
            return new Stub(core, impl);
        }
    
        public InterfaceFactory[] buildArray(int size) {
          return new InterfaceFactory[size];
        }
    };


    private static final int CREATE_AUDIO_DECODER_ORDINAL = 0;

    private static final int CREATE_VIDEO_DECODER_ORDINAL = 1;

    private static final int CREATE_RENDERER_ORDINAL = 2;

    private static final int CREATE_CDM_ORDINAL = 3;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements InterfaceFactory.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void createAudioDecoder(
org.chromium.mojo.bindings.InterfaceRequest<AudioDecoder> audioDecoder) {

            InterfaceFactoryCreateAudioDecoderParams _message = new InterfaceFactoryCreateAudioDecoderParams();

            _message.audioDecoder = audioDecoder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_AUDIO_DECODER_ORDINAL)));

        }


        @Override
        public void createVideoDecoder(
org.chromium.mojo.bindings.InterfaceRequest<VideoDecoder> videoDecoder) {

            InterfaceFactoryCreateVideoDecoderParams _message = new InterfaceFactoryCreateVideoDecoderParams();

            _message.videoDecoder = videoDecoder;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_VIDEO_DECODER_ORDINAL)));

        }


        @Override
        public void createRenderer(
String audioDeviceId, org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer) {

            InterfaceFactoryCreateRendererParams _message = new InterfaceFactoryCreateRendererParams();

            _message.audioDeviceId = audioDeviceId;

            _message.renderer = renderer;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_RENDERER_ORDINAL)));

        }


        @Override
        public void createCdm(
org.chromium.mojo.bindings.InterfaceRequest<ContentDecryptionModule> cdm) {

            InterfaceFactoryCreateCdmParams _message = new InterfaceFactoryCreateCdmParams();

            _message.cdm = cdm;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(CREATE_CDM_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<InterfaceFactory> {

        Stub(org.chromium.mojo.system.Core core, InterfaceFactory impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                InterfaceFactory_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case CREATE_AUDIO_DECODER_ORDINAL: {
            
                        InterfaceFactoryCreateAudioDecoderParams data =
                                InterfaceFactoryCreateAudioDecoderParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().createAudioDecoder(data.audioDecoder);
                        return true;
                    }
            
            
            
            
            
                    case CREATE_VIDEO_DECODER_ORDINAL: {
            
                        InterfaceFactoryCreateVideoDecoderParams data =
                                InterfaceFactoryCreateVideoDecoderParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().createVideoDecoder(data.videoDecoder);
                        return true;
                    }
            
            
            
            
            
                    case CREATE_RENDERER_ORDINAL: {
            
                        InterfaceFactoryCreateRendererParams data =
                                InterfaceFactoryCreateRendererParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().createRenderer(data.audioDeviceId, data.renderer);
                        return true;
                    }
            
            
            
            
            
                    case CREATE_CDM_ORDINAL: {
            
                        InterfaceFactoryCreateCdmParams data =
                                InterfaceFactoryCreateCdmParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().createCdm(data.cdm);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), InterfaceFactory_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class InterfaceFactoryCreateAudioDecoderParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<AudioDecoder> audioDecoder;
    
        private InterfaceFactoryCreateAudioDecoderParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public InterfaceFactoryCreateAudioDecoderParams() {
            this(0);
        }
    
        public static InterfaceFactoryCreateAudioDecoderParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateAudioDecoderParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateAudioDecoderParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateAudioDecoderParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new InterfaceFactoryCreateAudioDecoderParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.audioDecoder = decoder0.readInterfaceRequest(8, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(audioDecoder, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            InterfaceFactoryCreateAudioDecoderParams other = (InterfaceFactoryCreateAudioDecoderParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.audioDecoder, other.audioDecoder))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(audioDecoder);
            return result;
        }
    }



    
    static final class InterfaceFactoryCreateVideoDecoderParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<VideoDecoder> videoDecoder;
    
        private InterfaceFactoryCreateVideoDecoderParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public InterfaceFactoryCreateVideoDecoderParams() {
            this(0);
        }
    
        public static InterfaceFactoryCreateVideoDecoderParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateVideoDecoderParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateVideoDecoderParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateVideoDecoderParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new InterfaceFactoryCreateVideoDecoderParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.videoDecoder = decoder0.readInterfaceRequest(8, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(videoDecoder, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            InterfaceFactoryCreateVideoDecoderParams other = (InterfaceFactoryCreateVideoDecoderParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.videoDecoder, other.videoDecoder))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(videoDecoder);
            return result;
        }
    }



    
    static final class InterfaceFactoryCreateRendererParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public String audioDeviceId;
        public org.chromium.mojo.bindings.InterfaceRequest<Renderer> renderer;
    
        private InterfaceFactoryCreateRendererParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public InterfaceFactoryCreateRendererParams() {
            this(0);
        }
    
        public static InterfaceFactoryCreateRendererParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateRendererParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateRendererParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateRendererParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new InterfaceFactoryCreateRendererParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.audioDeviceId = decoder0.readString(8, false);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.renderer = decoder0.readInterfaceRequest(16, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(audioDeviceId, 8, false);
            
            encoder0.encode(renderer, 16, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            InterfaceFactoryCreateRendererParams other = (InterfaceFactoryCreateRendererParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.audioDeviceId, other.audioDeviceId))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.renderer, other.renderer))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(audioDeviceId);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(renderer);
            return result;
        }
    }



    
    static final class InterfaceFactoryCreateCdmParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.bindings.InterfaceRequest<ContentDecryptionModule> cdm;
    
        private InterfaceFactoryCreateCdmParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public InterfaceFactoryCreateCdmParams() {
            this(0);
        }
    
        public static InterfaceFactoryCreateCdmParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static InterfaceFactoryCreateCdmParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static InterfaceFactoryCreateCdmParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            InterfaceFactoryCreateCdmParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new InterfaceFactoryCreateCdmParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.cdm = decoder0.readInterfaceRequest(8, false);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(cdm, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            InterfaceFactoryCreateCdmParams other = (InterfaceFactoryCreateCdmParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.cdm, other.cdm))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(cdm);
            return result;
        }
    }



}
