// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./paymentrequest.proto
package org.bitcoin.protocols.payments;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;

import static com.squareup.wire.Message.Datatype.STRING;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class PaymentACK extends Message {
  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_MEMO = "";

  @ProtoField(tag = 1, label = REQUIRED)
  public final Payment payment;

  /**
   * Payment message that triggered this ACK
   */
  @ProtoField(tag = 2, type = STRING)
  public final String memo;

  public PaymentACK(Payment payment, String memo) {
    this.payment = payment;
    this.memo = memo;
  }

  private PaymentACK(Builder builder) {
    this(builder.payment, builder.memo);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PaymentACK)) return false;
    PaymentACK o = (PaymentACK) other;
    return equals(payment, o.payment)
        && equals(memo, o.memo);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = payment != null ? payment.hashCode() : 0;
      result = result * 37 + (memo != null ? memo.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PaymentACK> {

    public Payment payment;
    public String memo;

    public Builder() {
    }

    public Builder(PaymentACK message) {
      super(message);
      if (message == null) return;
      this.payment = message.payment;
      this.memo = message.memo;
    }

    public Builder payment(Payment payment) {
      this.payment = payment;
      return this;
    }

    /**
     * Payment message that triggered this ACK
     */
    public Builder memo(String memo) {
      this.memo = memo;
      return this;
    }

    @Override
    public PaymentACK build() {
      checkRequiredFields();
      return new PaymentACK(this);
    }
  }
}
