
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     third_party/WebKit/public/platform/modules/document_metadata/copyless_paste.mojom
//

package org.chromium.blink.mojom.document_metadata;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


public final class Values extends org.chromium.mojo.bindings.Union {

    public static final class Tag {
        public static final int BoolValues = 0;
        public static final int LongValues = 1;
        public static final int StringValues = 2;
        public static final int EntityValues = 3;
    };

    private int mTag_ = -1;
    private boolean[] mBoolValues;
    private long[] mLongValues;
    private String[] mStringValues;
    private Entity[] mEntityValues;

    public int which() {
      return mTag_;
    }

    public boolean isUnknown() {
      return mTag_ == -1;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP2")
    public void setBoolValues(boolean[] boolValues) {
        mTag_ = Tag.BoolValues;
        mBoolValues = boolValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP")
    public boolean[] getBoolValues() {
        assert mTag_ == Tag.BoolValues;
        return mBoolValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP2")
    public void setLongValues(long[] longValues) {
        mTag_ = Tag.LongValues;
        mLongValues = longValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP")
    public long[] getLongValues() {
        assert mTag_ == Tag.LongValues;
        return mLongValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP2")
    public void setStringValues(String[] stringValues) {
        mTag_ = Tag.StringValues;
        mStringValues = stringValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP")
    public String[] getStringValues() {
        assert mTag_ == Tag.StringValues;
        return mStringValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP2")
    public void setEntityValues(Entity[] entityValues) {
        mTag_ = Tag.EntityValues;
        mEntityValues = entityValues;
    }

    // TODO(rockot): Fix the findbugs error and remove this suppression.
    // See http://crbug.com/570386.
    @SuppressFBWarnings("EI_EXPOSE_REP")
    public Entity[] getEntityValues() {
        assert mTag_ == Tag.EntityValues;
        return mEntityValues;
    }


    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder0, int offset) {
        encoder0.encode(org.chromium.mojo.bindings.BindingsHelper.UNION_SIZE, offset);
        encoder0.encode(mTag_, offset + 4);
        switch (mTag_) {
            case Tag.BoolValues: {
                
                encoder0.encode(mBoolValues, offset + 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                break;
            }
            case Tag.LongValues: {
                
                encoder0.encode(mLongValues, offset + 8, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                break;
            }
            case Tag.StringValues: {
                
                if (mStringValues == null) {
                    encoder0.encodeNullPointer(offset + 8, false);
                } else {
                    org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(mStringValues.length, offset + 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    for (int i0 = 0; i0 < mStringValues.length; ++i0) {
                        
                        encoder1.encode(mStringValues[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                    }
                }
                break;
            }
            case Tag.EntityValues: {
                
                if (mEntityValues == null) {
                    encoder0.encodeNullPointer(offset + 8, false);
                } else {
                    org.chromium.mojo.bindings.Encoder encoder1 = encoder0.encodePointerArray(mEntityValues.length, offset + 8, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    for (int i0 = 0; i0 < mEntityValues.length; ++i0) {
                        
                        encoder1.encode(mEntityValues[i0], org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i0, false);
                    }
                }
                break;
            }
            default: {
                break;
            }
        }
    }

    public static Values deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message).decoderForSerializedUnion(), 0);
    }

    public static final Values decode(org.chromium.mojo.bindings.Decoder decoder0, int offset) {
        org.chromium.mojo.bindings.DataHeader dataHeader = decoder0.readDataHeaderForUnion(offset);
        if (dataHeader.size == 0) {
            return null;
        }
        Values result = new Values();
        switch (dataHeader.elementsOrVersion) {
            case Tag.BoolValues: {
                
                result.mBoolValues = decoder0.readBooleans(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                result.mTag_ = Tag.BoolValues;
                break;
            }
            case Tag.LongValues: {
                
                result.mLongValues = decoder0.readLongs(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, org.chromium.mojo.bindings.BindingsHelper.NOTHING_NULLABLE, org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                result.mTag_ = Tag.LongValues;
                break;
            }
            case Tag.StringValues: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.mStringValues = new String[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        result.mStringValues[i1] = decoder1.readString(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                    }
                }
                result.mTag_ = Tag.StringValues;
                break;
            }
            case Tag.EntityValues: {
                
                org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(offset + org.chromium.mojo.bindings.DataHeader.HEADER_SIZE, false);
                {
                    org.chromium.mojo.bindings.DataHeader si1 = decoder1.readDataHeaderForPointerArray(org.chromium.mojo.bindings.BindingsHelper.UNSPECIFIED_ARRAY_LENGTH);
                    result.mEntityValues = new Entity[si1.elementsOrVersion];
                    for (int i1 = 0; i1 < si1.elementsOrVersion; ++i1) {
                        
                        org.chromium.mojo.bindings.Decoder decoder2 = decoder1.readPointer(org.chromium.mojo.bindings.DataHeader.HEADER_SIZE + org.chromium.mojo.bindings.BindingsHelper.POINTER_SIZE * i1, false);
                        result.mEntityValues[i1] = Entity.decode(decoder2);
                    }
                }
                result.mTag_ = Tag.EntityValues;
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        Values other = (Values) object;
        if (mTag_ != other.mTag_)
            return false;
        switch (mTag_) {
            case Tag.BoolValues:
                return java.util.Arrays.equals(mBoolValues, other.mBoolValues);
            case Tag.LongValues:
                return java.util.Arrays.equals(mLongValues, other.mLongValues);
            case Tag.StringValues:
                return java.util.Arrays.deepEquals(mStringValues, other.mStringValues);
            case Tag.EntityValues:
                return java.util.Arrays.deepEquals(mEntityValues, other.mEntityValues);
            default:
                break;
        }
        return false;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(mTag_);
        switch (mTag_) {
            case Tag.BoolValues: {
                result = prime * result + java.util.Arrays.hashCode(mBoolValues);
                break;
            }
            case Tag.LongValues: {
                result = prime * result + java.util.Arrays.hashCode(mLongValues);
                break;
            }
            case Tag.StringValues: {
                result = prime * result + java.util.Arrays.deepHashCode(mStringValues);
                break;
            }
            case Tag.EntityValues: {
                result = prime * result + java.util.Arrays.deepHashCode(mEntityValues);
                break;
            }
            default: {
                break;
            }
        }
        return result;
    }
}