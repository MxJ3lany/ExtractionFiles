// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ./paymentrequest.proto
package org.bitcoin.protocols.payments;

import com.squareup.wire.Message;
import com.squareup.wire.ProtoField;
import okio.ByteString;

import java.util.Collections;
import java.util.List;

import static com.squareup.wire.Message.Datatype.*;
import static com.squareup.wire.Message.Label.REPEATED;
import static com.squareup.wire.Message.Label.REQUIRED;

public final class PaymentDetails extends Message {
  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NETWORK = "main";
  public static final List<Output> DEFAULT_OUTPUTS = Collections.emptyList();
  public static final Long DEFAULT_TIME = 0L;
  public static final Long DEFAULT_EXPIRES = 0L;
  public static final String DEFAULT_MEMO = "";
  public static final String DEFAULT_PAYMENT_URL = "";
  public static final ByteString DEFAULT_MERCHANT_DATA = ByteString.EMPTY;

  @ProtoField(tag = 1, type = STRING)
  public final String network;

  /**
   * "main" or "test"
   */
  @ProtoField(tag = 2, label = REPEATED, messageType = Output.class)
  public final List<Output> outputs;

  /**
   * Where payment should be sent
   */
  @ProtoField(tag = 3, type = UINT64, label = REQUIRED)
  public final Long time;

  /**
   * Timestamp; when payment request created
   */
  @ProtoField(tag = 4, type = UINT64)
  public final Long expires;

  /**
   * Timestamp; when this request should be considered invalid
   */
  @ProtoField(tag = 5, type = STRING)
  public final String memo;

  /**
   * Human-readable description of request for the customer
   */
  @ProtoField(tag = 6, type = STRING)
  public final String payment_url;

  /**
   * URL to send Payment and get PaymentACK
   */
  @ProtoField(tag = 7, type = BYTES)
  public final ByteString merchant_data;

  public PaymentDetails(String network, List<Output> outputs, Long time, Long expires, String memo, String payment_url, ByteString merchant_data) {
    this.network = network;
    this.outputs = immutableCopyOf(outputs);
    this.time = time;
    this.expires = expires;
    this.memo = memo;
    this.payment_url = payment_url;
    this.merchant_data = merchant_data;
  }

  private PaymentDetails(Builder builder) {
    this(builder.network, builder.outputs, builder.time, builder.expires, builder.memo, builder.payment_url, builder.merchant_data);
    setBuilder(builder);
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof PaymentDetails)) return false;
    PaymentDetails o = (PaymentDetails) other;
    return equals(network, o.network)
        && equals(outputs, o.outputs)
        && equals(time, o.time)
        && equals(expires, o.expires)
        && equals(memo, o.memo)
        && equals(payment_url, o.payment_url)
        && equals(merchant_data, o.merchant_data);
  }

  @Override
  public int hashCode() {
    int result = hashCode;
    if (result == 0) {
      result = network != null ? network.hashCode() : 0;
      result = result * 37 + (outputs != null ? outputs.hashCode() : 1);
      result = result * 37 + (time != null ? time.hashCode() : 0);
      result = result * 37 + (expires != null ? expires.hashCode() : 0);
      result = result * 37 + (memo != null ? memo.hashCode() : 0);
      result = result * 37 + (payment_url != null ? payment_url.hashCode() : 0);
      result = result * 37 + (merchant_data != null ? merchant_data.hashCode() : 0);
      hashCode = result;
    }
    return result;
  }

  public static final class Builder extends Message.Builder<PaymentDetails> {

    public String network;
    public List<Output> outputs;
    public Long time;
    public Long expires;
    public String memo;
    public String payment_url;
    public ByteString merchant_data;

    public Builder() {
    }

    public Builder(PaymentDetails message) {
      super(message);
      if (message == null) return;
      this.network = message.network;
      this.outputs = copyOf(message.outputs);
      this.time = message.time;
      this.expires = message.expires;
      this.memo = message.memo;
      this.payment_url = message.payment_url;
      this.merchant_data = message.merchant_data;
    }

    public Builder network(String network) {
      this.network = network;
      return this;
    }

    /**
     * "main" or "test"
     */
    public Builder outputs(List<Output> outputs) {
      this.outputs = checkForNulls(outputs);
      return this;
    }

    /**
     * Where payment should be sent
     */
    public Builder time(Long time) {
      this.time = time;
      return this;
    }

    /**
     * Timestamp; when payment request created
     */
    public Builder expires(Long expires) {
      this.expires = expires;
      return this;
    }

    /**
     * Timestamp; when this request should be considered invalid
     */
    public Builder memo(String memo) {
      this.memo = memo;
      return this;
    }

    /**
     * Human-readable description of request for the customer
     */
    public Builder payment_url(String payment_url) {
      this.payment_url = payment_url;
      return this;
    }

    /**
     * URL to send Payment and get PaymentACK
     */
    public Builder merchant_data(ByteString merchant_data) {
      this.merchant_data = merchant_data;
      return this;
    }

    @Override
    public PaymentDetails build() {
      checkRequiredFields();
      return new PaymentDetails(this);
    }
  }
}
