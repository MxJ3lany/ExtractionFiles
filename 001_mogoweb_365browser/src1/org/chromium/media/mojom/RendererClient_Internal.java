
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     media/mojo/interfaces/renderer.mojom
//

package org.chromium.media.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


class RendererClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<RendererClient, RendererClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<RendererClient, RendererClient.Proxy>() {
    
        public String getName() {
            return "media::mojom::RendererClient";
        }
    
        public int getVersion() {
          return 0;
        }
    
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }
    
        public Stub buildStub(org.chromium.mojo.system.Core core, RendererClient impl) {
            return new Stub(core, impl);
        }
    
        public RendererClient[] buildArray(int size) {
          return new RendererClient[size];
        }
    };


    private static final int ON_TIME_UPDATE_ORDINAL = 0;

    private static final int ON_BUFFERING_STATE_CHANGE_ORDINAL = 1;

    private static final int ON_ENDED_ORDINAL = 2;

    private static final int ON_ERROR_ORDINAL = 3;

    private static final int ON_VIDEO_NATURAL_SIZE_CHANGE_ORDINAL = 4;

    private static final int ON_VIDEO_OPACITY_CHANGE_ORDINAL = 5;

    private static final int ON_STATISTICS_UPDATE_ORDINAL = 6;

    private static final int ON_WAITING_FOR_DECRYPTION_KEY_ORDINAL = 7;

    private static final int ON_DURATION_CHANGE_ORDINAL = 8;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements RendererClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onTimeUpdate(
org.chromium.mojo.common.mojom.TimeDelta time, org.chromium.mojo.common.mojom.TimeDelta maxTime, org.chromium.mojo.common.mojom.TimeTicks captureTime) {

            RendererClientOnTimeUpdateParams _message = new RendererClientOnTimeUpdateParams();

            _message.time = time;

            _message.maxTime = maxTime;

            _message.captureTime = captureTime;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_TIME_UPDATE_ORDINAL)));

        }


        @Override
        public void onBufferingStateChange(
int state) {

            RendererClientOnBufferingStateChangeParams _message = new RendererClientOnBufferingStateChangeParams();

            _message.state = state;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_BUFFERING_STATE_CHANGE_ORDINAL)));

        }


        @Override
        public void onEnded(
) {

            RendererClientOnEndedParams _message = new RendererClientOnEndedParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_ENDED_ORDINAL)));

        }


        @Override
        public void onError(
) {

            RendererClientOnErrorParams _message = new RendererClientOnErrorParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_ERROR_ORDINAL)));

        }


        @Override
        public void onVideoNaturalSizeChange(
org.chromium.gfx.mojom.Size size) {

            RendererClientOnVideoNaturalSizeChangeParams _message = new RendererClientOnVideoNaturalSizeChangeParams();

            _message.size = size;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_VIDEO_NATURAL_SIZE_CHANGE_ORDINAL)));

        }


        @Override
        public void onVideoOpacityChange(
boolean opaque) {

            RendererClientOnVideoOpacityChangeParams _message = new RendererClientOnVideoOpacityChangeParams();

            _message.opaque = opaque;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_VIDEO_OPACITY_CHANGE_ORDINAL)));

        }


        @Override
        public void onStatisticsUpdate(
PipelineStatistics stats) {

            RendererClientOnStatisticsUpdateParams _message = new RendererClientOnStatisticsUpdateParams();

            _message.stats = stats;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_STATISTICS_UPDATE_ORDINAL)));

        }


        @Override
        public void onWaitingForDecryptionKey(
) {

            RendererClientOnWaitingForDecryptionKeyParams _message = new RendererClientOnWaitingForDecryptionKeyParams();


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_WAITING_FOR_DECRYPTION_KEY_ORDINAL)));

        }


        @Override
        public void onDurationChange(
org.chromium.mojo.common.mojom.TimeDelta duration) {

            RendererClientOnDurationChangeParams _message = new RendererClientOnDurationChangeParams();

            _message.duration = duration;


            getProxyHandler().getMessageReceiver().accept(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(ON_DURATION_CHANGE_ORDINAL)));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<RendererClient> {

        Stub(org.chromium.mojo.system.Core core, RendererClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                RendererClient_Internal.MANAGER, messageWithHeader);
            
            
            
            
            
                    case ON_TIME_UPDATE_ORDINAL: {
            
                        RendererClientOnTimeUpdateParams data =
                                RendererClientOnTimeUpdateParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onTimeUpdate(data.time, data.maxTime, data.captureTime);
                        return true;
                    }
            
            
            
            
            
                    case ON_BUFFERING_STATE_CHANGE_ORDINAL: {
            
                        RendererClientOnBufferingStateChangeParams data =
                                RendererClientOnBufferingStateChangeParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onBufferingStateChange(data.state);
                        return true;
                    }
            
            
            
            
            
                    case ON_ENDED_ORDINAL: {
            
                        RendererClientOnEndedParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onEnded();
                        return true;
                    }
            
            
            
            
            
                    case ON_ERROR_ORDINAL: {
            
                        RendererClientOnErrorParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onError();
                        return true;
                    }
            
            
            
            
            
                    case ON_VIDEO_NATURAL_SIZE_CHANGE_ORDINAL: {
            
                        RendererClientOnVideoNaturalSizeChangeParams data =
                                RendererClientOnVideoNaturalSizeChangeParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onVideoNaturalSizeChange(data.size);
                        return true;
                    }
            
            
            
            
            
                    case ON_VIDEO_OPACITY_CHANGE_ORDINAL: {
            
                        RendererClientOnVideoOpacityChangeParams data =
                                RendererClientOnVideoOpacityChangeParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onVideoOpacityChange(data.opaque);
                        return true;
                    }
            
            
            
            
            
                    case ON_STATISTICS_UPDATE_ORDINAL: {
            
                        RendererClientOnStatisticsUpdateParams data =
                                RendererClientOnStatisticsUpdateParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onStatisticsUpdate(data.stats);
                        return true;
                    }
            
            
            
            
            
                    case ON_WAITING_FOR_DECRYPTION_KEY_ORDINAL: {
            
                        RendererClientOnWaitingForDecryptionKeyParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onWaitingForDecryptionKey();
                        return true;
                    }
            
            
            
            
            
                    case ON_DURATION_CHANGE_ORDINAL: {
            
                        RendererClientOnDurationChangeParams data =
                                RendererClientOnDurationChangeParams.deserialize(messageWithHeader.getPayload());
            
                        getImpl().onDurationChange(data.duration);
                        return true;
                    }
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {
            
                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), RendererClient_Internal.MANAGER, messageWithHeader, receiver);
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
            
                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class RendererClientOnTimeUpdateParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.common.mojom.TimeDelta time;
        public org.chromium.mojo.common.mojom.TimeDelta maxTime;
        public org.chromium.mojo.common.mojom.TimeTicks captureTime;
    
        private RendererClientOnTimeUpdateParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnTimeUpdateParams() {
            this(0);
        }
    
        public static RendererClientOnTimeUpdateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnTimeUpdateParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnTimeUpdateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnTimeUpdateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnTimeUpdateParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.time = org.chromium.mojo.common.mojom.TimeDelta.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.maxTime = org.chromium.mojo.common.mojom.TimeDelta.decode(decoder1);
                }
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.captureTime = org.chromium.mojo.common.mojom.TimeTicks.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(time, 8, false);
            
            encoder0.encode(maxTime, 16, false);
            
            encoder0.encode(captureTime, 24, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            RendererClientOnTimeUpdateParams other = (RendererClientOnTimeUpdateParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.time, other.time))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.maxTime, other.maxTime))
                return false;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.captureTime, other.captureTime))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(time);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(maxTime);
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(captureTime);
            return result;
        }
    }



    
    static final class RendererClientOnBufferingStateChangeParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int state;
    
        private RendererClientOnBufferingStateChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnBufferingStateChangeParams() {
            this(0);
        }
    
        public static RendererClientOnBufferingStateChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnBufferingStateChangeParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnBufferingStateChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnBufferingStateChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnBufferingStateChangeParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.state = decoder0.readInt(8);
                        BufferingState.validate(result.state);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(state, 8);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            RendererClientOnBufferingStateChangeParams other = (RendererClientOnBufferingStateChangeParams) object;
            if (this.state!= other.state)
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(state);
            return result;
        }
    }



    
    static final class RendererClientOnEndedParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
        private RendererClientOnEndedParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnEndedParams() {
            this(0);
        }
    
        public static RendererClientOnEndedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnEndedParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnEndedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnEndedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnEndedParams(mainDataHeader.elementsOrVersion);
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            return result;
        }
    }



    
    static final class RendererClientOnErrorParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
        private RendererClientOnErrorParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnErrorParams() {
            this(0);
        }
    
        public static RendererClientOnErrorParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnErrorParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnErrorParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnErrorParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnErrorParams(mainDataHeader.elementsOrVersion);
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            return result;
        }
    }



    
    static final class RendererClientOnVideoNaturalSizeChangeParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.gfx.mojom.Size size;
    
        private RendererClientOnVideoNaturalSizeChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnVideoNaturalSizeChangeParams() {
            this(0);
        }
    
        public static RendererClientOnVideoNaturalSizeChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnVideoNaturalSizeChangeParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnVideoNaturalSizeChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnVideoNaturalSizeChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnVideoNaturalSizeChangeParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.size = org.chromium.gfx.mojom.Size.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(size, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            RendererClientOnVideoNaturalSizeChangeParams other = (RendererClientOnVideoNaturalSizeChangeParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.size, other.size))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(size);
            return result;
        }
    }



    
    static final class RendererClientOnVideoOpacityChangeParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public boolean opaque;
    
        private RendererClientOnVideoOpacityChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnVideoOpacityChangeParams() {
            this(0);
        }
    
        public static RendererClientOnVideoOpacityChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnVideoOpacityChangeParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnVideoOpacityChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnVideoOpacityChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnVideoOpacityChangeParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    result.opaque = decoder0.readBoolean(8, 0);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(opaque, 8, 0);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            RendererClientOnVideoOpacityChangeParams other = (RendererClientOnVideoOpacityChangeParams) object;
            if (this.opaque!= other.opaque)
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(opaque);
            return result;
        }
    }



    
    static final class RendererClientOnStatisticsUpdateParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public PipelineStatistics stats;
    
        private RendererClientOnStatisticsUpdateParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnStatisticsUpdateParams() {
            this(0);
        }
    
        public static RendererClientOnStatisticsUpdateParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnStatisticsUpdateParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnStatisticsUpdateParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnStatisticsUpdateParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnStatisticsUpdateParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.stats = PipelineStatistics.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(stats, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            RendererClientOnStatisticsUpdateParams other = (RendererClientOnStatisticsUpdateParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.stats, other.stats))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(stats);
            return result;
        }
    }



    
    static final class RendererClientOnWaitingForDecryptionKeyParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 8;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(8, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    
        private RendererClientOnWaitingForDecryptionKeyParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnWaitingForDecryptionKeyParams() {
            this(0);
        }
    
        public static RendererClientOnWaitingForDecryptionKeyParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnWaitingForDecryptionKeyParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnWaitingForDecryptionKeyParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnWaitingForDecryptionKeyParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnWaitingForDecryptionKeyParams(mainDataHeader.elementsOrVersion);
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            return result;
        }
    }



    
    static final class RendererClientOnDurationChangeParams extends org.chromium.mojo.bindings.Struct {
    
        private static final int STRUCT_SIZE = 16;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(16, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public org.chromium.mojo.common.mojom.TimeDelta duration;
    
        private RendererClientOnDurationChangeParams(int version) {
            super(STRUCT_SIZE, version);
        }
    
        public RendererClientOnDurationChangeParams() {
            this(0);
        }
    
        public static RendererClientOnDurationChangeParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }
    
        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static RendererClientOnDurationChangeParams deserialize(java.nio.ByteBuffer data) {
            if (data == null)
                return null;
    
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }
    
        @SuppressWarnings("unchecked")
        public static RendererClientOnDurationChangeParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            RendererClientOnDurationChangeParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                result = new RendererClientOnDurationChangeParams(mainDataHeader.elementsOrVersion);
                if (mainDataHeader.elementsOrVersion >= 0) {
                    
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(8, false);
                    result.duration = org.chromium.mojo.common.mojom.TimeDelta.decode(decoder1);
                }
            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }
    
        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(duration, 8, false);
        }
    
        /**
         * @see Object#equals(Object)
         */
        @Override
        public boolean equals(Object object) {
            if (object == this)
                return true;
            if (object == null)
                return false;
            if (getClass() != object.getClass())
                return false;
            RendererClientOnDurationChangeParams other = (RendererClientOnDurationChangeParams) object;
            if (!org.chromium.mojo.bindings.BindingsHelper.equals(this.duration, other.duration))
                return false;
            return true;
        }
    
        /**
         * @see Object#hashCode()
         */
        @Override
        public int hashCode() {
            final int prime = 31;
            int result = prime + getClass().hashCode();
            result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(duration);
            return result;
        }
    }



}
