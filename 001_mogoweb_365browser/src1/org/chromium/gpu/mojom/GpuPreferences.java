
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     gpu/ipc/common/gpu_preferences.mojom
//

package org.chromium.gpu.mojom;

import org.chromium.base.annotations.SuppressFBWarnings;
import org.chromium.mojo.bindings.DeserializationException;


public final class GpuPreferences extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 24;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public boolean singleProcess;
    public boolean inProcessGpu;
    public boolean uiPrioritizeInGpuProcess;
    public boolean enableGpuScheduler;
    public boolean disableAcceleratedVideoDecode;
    public boolean disableVaapiAcceleratedVideoEncode;
    public boolean disableWebRtcHwEncoding;
    public int enableAcceleratedVpxDecode;
    public boolean enableLowLatencyDxva;
    public boolean enableZeroCopyDxgiVideo;
    public boolean enableNv12DxgiVideo;
    public boolean compileShaderAlwaysSucceeds;
    public boolean disableGlErrorLimit;
    public boolean disableGlslTranslator;
    public boolean disableGpuDriverBugWorkarounds;
    public boolean disableShaderNameHashing;
    public boolean enableGpuCommandLogging;
    public boolean enableGpuDebugging;
    public boolean enableGpuServiceLoggingGpu;
    public boolean enableGpuDriverDebugLogging;
    public boolean disableGpuProgramCache;
    public boolean enforceGlMinimums;
    public int forceGpuMemAvailable;
    public int gpuProgramCacheSize;
    public boolean disableGpuShaderDiskCache;
    public boolean enableThreadedTextureMailboxes;
    public boolean glShaderIntermOutput;
    public boolean emulateShaderPrecision;
    public boolean enableGpuServiceLogging;
    public boolean enableGpuServiceTracing;
    public boolean enableEs3Apis;
    public boolean usePassthroughCmdDecoder;

    private GpuPreferences(int version) {
        super(STRUCT_SIZE, version);
    }

    public GpuPreferences() {
        this(0);
    }

    public static GpuPreferences deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static GpuPreferences deserialize(java.nio.ByteBuffer data) {
        if (data == null)
            return null;

        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static GpuPreferences decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        GpuPreferences result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            result = new GpuPreferences(mainDataHeader.elementsOrVersion);
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.singleProcess = decoder0.readBoolean(8, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.inProcessGpu = decoder0.readBoolean(8, 1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.uiPrioritizeInGpuProcess = decoder0.readBoolean(8, 2);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuScheduler = decoder0.readBoolean(8, 3);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableAcceleratedVideoDecode = decoder0.readBoolean(8, 4);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableVaapiAcceleratedVideoEncode = decoder0.readBoolean(8, 5);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableWebRtcHwEncoding = decoder0.readBoolean(8, 6);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableLowLatencyDxva = decoder0.readBoolean(8, 7);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableZeroCopyDxgiVideo = decoder0.readBoolean(9, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableNv12DxgiVideo = decoder0.readBoolean(9, 1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.compileShaderAlwaysSucceeds = decoder0.readBoolean(9, 2);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableGlErrorLimit = decoder0.readBoolean(9, 3);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableGlslTranslator = decoder0.readBoolean(9, 4);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableGpuDriverBugWorkarounds = decoder0.readBoolean(9, 5);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableShaderNameHashing = decoder0.readBoolean(9, 6);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuCommandLogging = decoder0.readBoolean(9, 7);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuDebugging = decoder0.readBoolean(10, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuServiceLoggingGpu = decoder0.readBoolean(10, 1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuDriverDebugLogging = decoder0.readBoolean(10, 2);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableGpuProgramCache = decoder0.readBoolean(10, 3);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enforceGlMinimums = decoder0.readBoolean(10, 4);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.disableGpuShaderDiskCache = decoder0.readBoolean(10, 5);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableThreadedTextureMailboxes = decoder0.readBoolean(10, 6);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.glShaderIntermOutput = decoder0.readBoolean(10, 7);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.emulateShaderPrecision = decoder0.readBoolean(11, 0);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuServiceLogging = decoder0.readBoolean(11, 1);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableGpuServiceTracing = decoder0.readBoolean(11, 2);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableEs3Apis = decoder0.readBoolean(11, 3);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.usePassthroughCmdDecoder = decoder0.readBoolean(11, 4);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.enableAcceleratedVpxDecode = decoder0.readInt(12);
                    VpxDecodeVendors.validate(result.enableAcceleratedVpxDecode);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.forceGpuMemAvailable = decoder0.readInt(16);
            }
            if (mainDataHeader.elementsOrVersion >= 0) {
                
                result.gpuProgramCacheSize = decoder0.readInt(20);
            }
        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(singleProcess, 8, 0);
        
        encoder0.encode(inProcessGpu, 8, 1);
        
        encoder0.encode(uiPrioritizeInGpuProcess, 8, 2);
        
        encoder0.encode(enableGpuScheduler, 8, 3);
        
        encoder0.encode(disableAcceleratedVideoDecode, 8, 4);
        
        encoder0.encode(disableVaapiAcceleratedVideoEncode, 8, 5);
        
        encoder0.encode(disableWebRtcHwEncoding, 8, 6);
        
        encoder0.encode(enableLowLatencyDxva, 8, 7);
        
        encoder0.encode(enableZeroCopyDxgiVideo, 9, 0);
        
        encoder0.encode(enableNv12DxgiVideo, 9, 1);
        
        encoder0.encode(compileShaderAlwaysSucceeds, 9, 2);
        
        encoder0.encode(disableGlErrorLimit, 9, 3);
        
        encoder0.encode(disableGlslTranslator, 9, 4);
        
        encoder0.encode(disableGpuDriverBugWorkarounds, 9, 5);
        
        encoder0.encode(disableShaderNameHashing, 9, 6);
        
        encoder0.encode(enableGpuCommandLogging, 9, 7);
        
        encoder0.encode(enableGpuDebugging, 10, 0);
        
        encoder0.encode(enableGpuServiceLoggingGpu, 10, 1);
        
        encoder0.encode(enableGpuDriverDebugLogging, 10, 2);
        
        encoder0.encode(disableGpuProgramCache, 10, 3);
        
        encoder0.encode(enforceGlMinimums, 10, 4);
        
        encoder0.encode(disableGpuShaderDiskCache, 10, 5);
        
        encoder0.encode(enableThreadedTextureMailboxes, 10, 6);
        
        encoder0.encode(glShaderIntermOutput, 10, 7);
        
        encoder0.encode(emulateShaderPrecision, 11, 0);
        
        encoder0.encode(enableGpuServiceLogging, 11, 1);
        
        encoder0.encode(enableGpuServiceTracing, 11, 2);
        
        encoder0.encode(enableEs3Apis, 11, 3);
        
        encoder0.encode(usePassthroughCmdDecoder, 11, 4);
        
        encoder0.encode(enableAcceleratedVpxDecode, 12);
        
        encoder0.encode(forceGpuMemAvailable, 16);
        
        encoder0.encode(gpuProgramCacheSize, 20);
    }

    /**
     * @see Object#equals(Object)
     */
    @Override
    public boolean equals(Object object) {
        if (object == this)
            return true;
        if (object == null)
            return false;
        if (getClass() != object.getClass())
            return false;
        GpuPreferences other = (GpuPreferences) object;
        if (this.singleProcess!= other.singleProcess)
            return false;
        if (this.inProcessGpu!= other.inProcessGpu)
            return false;
        if (this.uiPrioritizeInGpuProcess!= other.uiPrioritizeInGpuProcess)
            return false;
        if (this.enableGpuScheduler!= other.enableGpuScheduler)
            return false;
        if (this.disableAcceleratedVideoDecode!= other.disableAcceleratedVideoDecode)
            return false;
        if (this.disableVaapiAcceleratedVideoEncode!= other.disableVaapiAcceleratedVideoEncode)
            return false;
        if (this.disableWebRtcHwEncoding!= other.disableWebRtcHwEncoding)
            return false;
        if (this.enableAcceleratedVpxDecode!= other.enableAcceleratedVpxDecode)
            return false;
        if (this.enableLowLatencyDxva!= other.enableLowLatencyDxva)
            return false;
        if (this.enableZeroCopyDxgiVideo!= other.enableZeroCopyDxgiVideo)
            return false;
        if (this.enableNv12DxgiVideo!= other.enableNv12DxgiVideo)
            return false;
        if (this.compileShaderAlwaysSucceeds!= other.compileShaderAlwaysSucceeds)
            return false;
        if (this.disableGlErrorLimit!= other.disableGlErrorLimit)
            return false;
        if (this.disableGlslTranslator!= other.disableGlslTranslator)
            return false;
        if (this.disableGpuDriverBugWorkarounds!= other.disableGpuDriverBugWorkarounds)
            return false;
        if (this.disableShaderNameHashing!= other.disableShaderNameHashing)
            return false;
        if (this.enableGpuCommandLogging!= other.enableGpuCommandLogging)
            return false;
        if (this.enableGpuDebugging!= other.enableGpuDebugging)
            return false;
        if (this.enableGpuServiceLoggingGpu!= other.enableGpuServiceLoggingGpu)
            return false;
        if (this.enableGpuDriverDebugLogging!= other.enableGpuDriverDebugLogging)
            return false;
        if (this.disableGpuProgramCache!= other.disableGpuProgramCache)
            return false;
        if (this.enforceGlMinimums!= other.enforceGlMinimums)
            return false;
        if (this.forceGpuMemAvailable!= other.forceGpuMemAvailable)
            return false;
        if (this.gpuProgramCacheSize!= other.gpuProgramCacheSize)
            return false;
        if (this.disableGpuShaderDiskCache!= other.disableGpuShaderDiskCache)
            return false;
        if (this.enableThreadedTextureMailboxes!= other.enableThreadedTextureMailboxes)
            return false;
        if (this.glShaderIntermOutput!= other.glShaderIntermOutput)
            return false;
        if (this.emulateShaderPrecision!= other.emulateShaderPrecision)
            return false;
        if (this.enableGpuServiceLogging!= other.enableGpuServiceLogging)
            return false;
        if (this.enableGpuServiceTracing!= other.enableGpuServiceTracing)
            return false;
        if (this.enableEs3Apis!= other.enableEs3Apis)
            return false;
        if (this.usePassthroughCmdDecoder!= other.usePassthroughCmdDecoder)
            return false;
        return true;
    }

    /**
     * @see Object#hashCode()
     */
    @Override
    public int hashCode() {
        final int prime = 31;
        int result = prime + getClass().hashCode();
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(singleProcess);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(inProcessGpu);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(uiPrioritizeInGpuProcess);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuScheduler);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableAcceleratedVideoDecode);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableVaapiAcceleratedVideoEncode);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableWebRtcHwEncoding);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableAcceleratedVpxDecode);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableLowLatencyDxva);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableZeroCopyDxgiVideo);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableNv12DxgiVideo);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(compileShaderAlwaysSucceeds);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableGlErrorLimit);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableGlslTranslator);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableGpuDriverBugWorkarounds);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableShaderNameHashing);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuCommandLogging);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuDebugging);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuServiceLoggingGpu);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuDriverDebugLogging);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableGpuProgramCache);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enforceGlMinimums);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(forceGpuMemAvailable);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(gpuProgramCacheSize);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(disableGpuShaderDiskCache);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableThreadedTextureMailboxes);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(glShaderIntermOutput);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(emulateShaderPrecision);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuServiceLogging);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableGpuServiceTracing);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(enableEs3Apis);
        result = prime * result + org.chromium.mojo.bindings.BindingsHelper.hashCode(usePassthroughCmdDecoder);
        return result;
    }
}