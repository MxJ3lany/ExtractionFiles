package com.hankkin.reading.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import java.util.List;

import com.hankkin.reading.domain.TranslateBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSLATE_BEAN".
*/
public class TranslateBeanDao extends AbstractDao<TranslateBean, Long> {

    public static final String TABLENAME = "TRANSLATE_BEAN";

    /**
     * Properties of entity TranslateBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Translations = new Property(1, String.class, "translations", false, "TRANSLATIONS");
        public final static Property Query = new Property(2, String.class, "query", false, "QUERY");
        public final static Property ErrorCode = new Property(3, int.class, "errorCode", false, "ERROR_CODE");
        public final static Property UsPhonetic = new Property(4, String.class, "usPhonetic", false, "US_PHONETIC");
        public final static Property Phonetic = new Property(5, String.class, "phonetic", false, "PHONETIC");
        public final static Property From = new Property(6, String.class, "from", false, "FROM");
        public final static Property To = new Property(7, String.class, "to", false, "TO");
        public final static Property Le = new Property(8, String.class, "le", false, "LE");
        public final static Property Deeplink = new Property(9, String.class, "deeplink", false, "DEEPLINK");
        public final static Property DictDeeplink = new Property(10, String.class, "dictDeeplink", false, "DICT_DEEPLINK");
        public final static Property UkPhonetic = new Property(11, String.class, "ukPhonetic", false, "UK_PHONETIC");
        public final static Property Explains = new Property(12, String.class, "explains", false, "EXPLAINS");
        public final static Property SpeakUrl = new Property(13, String.class, "speakUrl", false, "SPEAK_URL");
        public final static Property UKSpeakUrl = new Property(14, String.class, "UKSpeakUrl", false, "UKSPEAK_URL");
        public final static Property USSpeakUrl = new Property(15, String.class, "USSpeakUrl", false, "USSPEAK_URL");
        public final static Property ResultSpeakUrl = new Property(16, String.class, "resultSpeakUrl", false, "RESULT_SPEAK_URL");
    }

    private DaoSession daoSession;

    private final StringConverter translationsConverter = new StringConverter();
    private final StringConverter explainsConverter = new StringConverter();

    public TranslateBeanDao(DaoConfig config) {
        super(config);
    }
    
    public TranslateBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSLATE_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"TRANSLATIONS\" TEXT," + // 1: translations
                "\"QUERY\" TEXT," + // 2: query
                "\"ERROR_CODE\" INTEGER NOT NULL ," + // 3: errorCode
                "\"US_PHONETIC\" TEXT," + // 4: usPhonetic
                "\"PHONETIC\" TEXT," + // 5: phonetic
                "\"FROM\" TEXT," + // 6: from
                "\"TO\" TEXT," + // 7: to
                "\"LE\" TEXT," + // 8: le
                "\"DEEPLINK\" TEXT," + // 9: deeplink
                "\"DICT_DEEPLINK\" TEXT," + // 10: dictDeeplink
                "\"UK_PHONETIC\" TEXT," + // 11: ukPhonetic
                "\"EXPLAINS\" TEXT," + // 12: explains
                "\"SPEAK_URL\" TEXT," + // 13: speakUrl
                "\"UKSPEAK_URL\" TEXT," + // 14: UKSpeakUrl
                "\"USSPEAK_URL\" TEXT," + // 15: USSpeakUrl
                "\"RESULT_SPEAK_URL\" TEXT);"); // 16: resultSpeakUrl
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSLATE_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TranslateBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        List translations = entity.getTranslations();
        if (translations != null) {
            stmt.bindString(2, translationsConverter.convertToDatabaseValue(translations));
        }
 
        String query = entity.getQuery();
        if (query != null) {
            stmt.bindString(3, query);
        }
        stmt.bindLong(4, entity.getErrorCode());
 
        String usPhonetic = entity.getUsPhonetic();
        if (usPhonetic != null) {
            stmt.bindString(5, usPhonetic);
        }
 
        String phonetic = entity.getPhonetic();
        if (phonetic != null) {
            stmt.bindString(6, phonetic);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String le = entity.getLe();
        if (le != null) {
            stmt.bindString(9, le);
        }
 
        String deeplink = entity.getDeeplink();
        if (deeplink != null) {
            stmt.bindString(10, deeplink);
        }
 
        String dictDeeplink = entity.getDictDeeplink();
        if (dictDeeplink != null) {
            stmt.bindString(11, dictDeeplink);
        }
 
        String ukPhonetic = entity.getUkPhonetic();
        if (ukPhonetic != null) {
            stmt.bindString(12, ukPhonetic);
        }
 
        List explains = entity.getExplains();
        if (explains != null) {
            stmt.bindString(13, explainsConverter.convertToDatabaseValue(explains));
        }
 
        String speakUrl = entity.getSpeakUrl();
        if (speakUrl != null) {
            stmt.bindString(14, speakUrl);
        }
 
        String UKSpeakUrl = entity.getUKSpeakUrl();
        if (UKSpeakUrl != null) {
            stmt.bindString(15, UKSpeakUrl);
        }
 
        String USSpeakUrl = entity.getUSSpeakUrl();
        if (USSpeakUrl != null) {
            stmt.bindString(16, USSpeakUrl);
        }
 
        String resultSpeakUrl = entity.getResultSpeakUrl();
        if (resultSpeakUrl != null) {
            stmt.bindString(17, resultSpeakUrl);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TranslateBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        List translations = entity.getTranslations();
        if (translations != null) {
            stmt.bindString(2, translationsConverter.convertToDatabaseValue(translations));
        }
 
        String query = entity.getQuery();
        if (query != null) {
            stmt.bindString(3, query);
        }
        stmt.bindLong(4, entity.getErrorCode());
 
        String usPhonetic = entity.getUsPhonetic();
        if (usPhonetic != null) {
            stmt.bindString(5, usPhonetic);
        }
 
        String phonetic = entity.getPhonetic();
        if (phonetic != null) {
            stmt.bindString(6, phonetic);
        }
 
        String from = entity.getFrom();
        if (from != null) {
            stmt.bindString(7, from);
        }
 
        String to = entity.getTo();
        if (to != null) {
            stmt.bindString(8, to);
        }
 
        String le = entity.getLe();
        if (le != null) {
            stmt.bindString(9, le);
        }
 
        String deeplink = entity.getDeeplink();
        if (deeplink != null) {
            stmt.bindString(10, deeplink);
        }
 
        String dictDeeplink = entity.getDictDeeplink();
        if (dictDeeplink != null) {
            stmt.bindString(11, dictDeeplink);
        }
 
        String ukPhonetic = entity.getUkPhonetic();
        if (ukPhonetic != null) {
            stmt.bindString(12, ukPhonetic);
        }
 
        List explains = entity.getExplains();
        if (explains != null) {
            stmt.bindString(13, explainsConverter.convertToDatabaseValue(explains));
        }
 
        String speakUrl = entity.getSpeakUrl();
        if (speakUrl != null) {
            stmt.bindString(14, speakUrl);
        }
 
        String UKSpeakUrl = entity.getUKSpeakUrl();
        if (UKSpeakUrl != null) {
            stmt.bindString(15, UKSpeakUrl);
        }
 
        String USSpeakUrl = entity.getUSSpeakUrl();
        if (USSpeakUrl != null) {
            stmt.bindString(16, USSpeakUrl);
        }
 
        String resultSpeakUrl = entity.getResultSpeakUrl();
        if (resultSpeakUrl != null) {
            stmt.bindString(17, resultSpeakUrl);
        }
    }

    @Override
    protected final void attachEntity(TranslateBean entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public TranslateBean readEntity(Cursor cursor, int offset) {
        TranslateBean entity = new TranslateBean( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : translationsConverter.convertToEntityProperty(cursor.getString(offset + 1)), // translations
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // query
            cursor.getInt(offset + 3), // errorCode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // usPhonetic
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // phonetic
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // from
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // to
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // le
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // deeplink
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // dictDeeplink
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // ukPhonetic
            cursor.isNull(offset + 12) ? null : explainsConverter.convertToEntityProperty(cursor.getString(offset + 12)), // explains
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // speakUrl
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // UKSpeakUrl
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // USSpeakUrl
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // resultSpeakUrl
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TranslateBean entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setTranslations(cursor.isNull(offset + 1) ? null : translationsConverter.convertToEntityProperty(cursor.getString(offset + 1)));
        entity.setQuery(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setErrorCode(cursor.getInt(offset + 3));
        entity.setUsPhonetic(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPhonetic(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFrom(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTo(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setLe(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setDeeplink(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setDictDeeplink(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUkPhonetic(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setExplains(cursor.isNull(offset + 12) ? null : explainsConverter.convertToEntityProperty(cursor.getString(offset + 12)));
        entity.setSpeakUrl(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setUKSpeakUrl(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setUSSpeakUrl(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setResultSpeakUrl(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TranslateBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TranslateBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TranslateBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
